package xscript.lang;

public abstract class Collection<E>:Iterable<E> {

	public abstract int size();

	public bool isEmpty(){
		return size()==0;
	}

	public bool contains(E param){
		if(param==null){
			for(E e:this){
				if(e==null)
					return true;
			}
		}else{
			for(E e:this){
				if(param.equals(e))
					return true;
			}
		}
		return false;
	}

	public abstract Iterator<E> iterator();

	public E[] toArray(){
		return toArray(null);
	}

	public abstract E[] toArray(E[] e){
		int size = size();
		if(e==null || e.length<size){
			e = new E[size];
		}
		Iterator<E> i = iterator();
		for(int p=0; p<size && i.hasNext(); p++){
			e[p] = i.next();
		}
		return e;
	}

	public abstract bool add(E paramE);

	public bool remove(Object param){
		Iterator<E> i = iterator();
		if(param==null){
			do{
				if(!i.hasNext())
					return false;
			}while(i.next()!=null);
			i.remove();
			return true;
		}
		do{
			if(!i.hasNext())
				return false;
		}while(param.equals(i.next()));
		i.remove();
		return true;
	}

	public bool containsAll(Collection<E> paramCollection){
		for(E param:paramCollection){
			if(!contains(param))
				return false;
		}
		return true;
	}

	public bool addAll(Collection<E> paramCollection){
		bool b = false;
		for(E param:paramCollection){
			if(add(param))
				b = true;
		}
		return b;
	}

	public bool removeAll(Collection<E> paramCollection){
		bool b = false;
		Iterator<E> i = iterator();
		while (i.hasNext()) {
			if (!(paramCollection.contains(i.next())))
				continue;
			i.remove();
			b = true;
		}
		return b;
	}

	public bool retainAll(Collection<E> paramCollection) {
		bool b = false;
		Iterator<E> i = iterator();
		while (i.hasNext()) {
			if (paramCollection.contains(i.next()))
				continue;
			i.remove();
			b = true;
		}
		return b;
	}

	public void clear() {
		Iterator<E> i = iterator();
		while (i.hasNext())  {
			i.next();
			i.remove();
		}
	}

	public abstract bool equals(Object paramObject);

	public abstract int hashCode();
	
	public String toString() {
		Iterator<E> i = iterator();
		if (!i.hasNext())
			return "[]";
		String ret = "[";
		while (true) {
			E obj = i.next();
			ret = ret + (obj == this ? "(this Collection)" : obj);
			if (!(i.hasNext())){
				return ret + ']';
			}
			ret = ret + ", ";
		}
	}
	
}